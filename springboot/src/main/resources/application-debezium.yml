debezium:
  enabled: true
  topic: tencent-mysql-debezium
  properties:
    name: silvermoon-fso #kafka connector名称
    connector.class: io.debezium.connector.mysql.MySqlConnector #connector实现类
    database.server.id: 65535 # Unique ID of the connector
    database.server.name: springboot_learn
    database.hostname: 49.235.67.7
    database.port: 3306
    database.user: root
    database.password: 70baf77d7d80de7b
    database.server.timezone: UTC
    # 监听的库列表
    database.include.list: springbootlearn
    # 监听的表列表
    table.include.list: springbootlearn.user,springbootlearn.user_detail
    bootstrap.servers: ${spring.kafka.bootstrap-servers} #kafka地址
    offset.storage: org.apache.kafka.connect.storage.KafkaOffsetBackingStore #下标存储策略
    offset.storage.topic: tencent-mysql-debezium-offset-storage #下标存储topic
    offset.storage.partitions: 1 #下标存储topic分区
    offset.storage.replication.factor: 1 #下标存储topic分区副本数
    database.history: io.debezium.relational.history.KafkaDatabaseHistory
    database.history.kafka.bootstrap.servers:  ${spring.kafka.bootstrap-servers}
    database.history.kafka.topic: tencent-mysql-debezium-database-history
    snapshot.locking.mode: none
    snapshot.mode: when_needed
    snapshot.new.tables: parallel
    #offset.flush.interval.ms: 60000 #offset提交间隔时间，因为我们使用了AlwaysCommitOffsetPolicy，所以不用这个配置
    key.converter.schemas.enable: false #kafka的key消息中是否带schema
    value.converter.schemas.enable: false #kafka的value消息中是否带schema
    include.schema.changes: true
    tombstones.on.delete: false
    database.history.store.only.captured.tables.ddl: false
    database.history.skip.unparseable.ddl: true
    event.deserialization.failure.handling.mode: warn #binlog反序列化异常时处理方式
    inconsistent.schema.handling.mode: warn #处理DDL语句异常时处理方式
    #skipped.operations: u #设置跳过的事件类型，如果只需要关注特定类型的binlog事件，则需要
    event.processing.failure.handling.mode: warn #处理binlog事件报错时的处理方式
    decimal.handling.mode: double #decimal数据类型处理方式

spring:
  profiles:
    include: kafka